using System;
using NUnit.Framework;
using Electrolyte;

namespace Electrolyte.Test {
	[TestFixture]
	public class OpcodesTest {
		Tuple<string, Op>[] ops = new Tuple<string, Op>[] {
			Tuple.Create("OP_TRUE", Op.True),
			Tuple.Create("OP_FALSE", Op.False),
			Tuple.Create("OP_1", Op.True),
			Tuple.Create("OP_0", Op.False),
			Tuple.Create("OP_5", Op.Num5),
			Tuple.Create("OP_1NEGATE", Op.Negate1),
			Tuple.Create("OP_IF", Op.If),
			Tuple.Create("OP_2SWAP", Op.Swap2)
		};

		Tuple<byte[], byte[], string, string>[] packs = new Tuple<byte[], byte[], string, string>[] {
			Tuple.Create(new byte[] { 5, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E }, new byte[] { 0x0A, 0x0B, 0x0C, 0x0D, 0x0E }, "0A0B0C0D0E", "0x0A0B0C0D0E"),
			Tuple.Create(new byte[] {
				(byte)Op.PushData1, 76,
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
				0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
				0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
				0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
				0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B
			}, new byte[] {
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
				0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
				0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
				0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
				0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B
			}, "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B",
			"0x000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B")
		};

		[Test]
		public void Strings() {
			foreach(Tuple<string, Op> op in ops) {
				Assert.AreEqual(op.Item2, Opcodes.Strings[op.Item1]);
			}
		}

		[Test]
		public void Pack() {
			foreach(Tuple<byte[],byte[],string,string> pack in packs) {
				Assert.AreEqual(pack.Item1, Opcodes.Pack(pack.Item2));
				Assert.AreEqual(pack.Item1, Opcodes.Pack(pack.Item3));
				Assert.AreEqual(pack.Item1, Opcodes.Pack(pack.Item4));
			}
		}
	}
}

