using System;
using NUnit.Framework;
using Electrolyte.Cryptography;

namespace Electrolyte.Test.Cryptography {
	[TestFixture]
	public class DigestTest {
		[Test]
		public void SingleDigest() {
			Assert.AreEqual(
				SHA256.Hash(new byte[] { 0x01, 0x02, 0x03 }),
				new byte[] { 0x03, 0x90, 0x58, 0xC6, 0xF2, 0xC0, 0xCB, 0x49, 0x2C, 0x53, 0x3B, 0x0A, 0x4D, 0x14, 0xEF, 0x77, 0xCC, 0x0F, 0x78, 0xAB, 0xCC, 0xCE, 0xD5, 0x28, 0x7D, 0x84, 0xA1, 0xA2, 0x01, 0x1C, 0xFB, 0x81 }
			);

			Assert.AreEqual(
				SHA1.Hash(new byte[] { 0x01, 0x02, 0x03 }),
				new byte[] { 0x70, 0x37, 0x80, 0x71, 0x98, 0xC2, 0x2A, 0x7D, 0x2B, 0x08, 0x07, 0x37, 0x1D, 0x76, 0x37, 0x79, 0xA8, 0x4F, 0xDF, 0xCF }
			);

			Assert.AreEqual(
				RIPEMD160.Hash(new byte[] { 0x01, 0x02, 0x03 }),
				new byte[] { 0x79, 0xF9, 0x01, 0xDA, 0x26, 0x09, 0xF0, 0x20, 0xAD, 0xAD, 0xBF, 0x2E, 0x5F, 0x68, 0xA1, 0x6C, 0x8C, 0x3F, 0x7D, 0x57 }
			);
		}

		[Test]
		public void MultiDigest() {
			Assert.AreEqual(
				Digest.Hash<SHA256, SHA256>(new byte[] { 0x01, 0x02, 0x03 }),
				new byte[] { 0x19, 0xC6, 0x19, 0x7E, 0x21, 0x40, 0xB9, 0xD0, 0x34, 0xFB, 0x20, 0xB9, 0xAC, 0x7B, 0xB7, 0x53, 0xA4, 0x12, 0x33, 0xCA, 0xF1, 0xE1, 0xDA, 0xFD, 0xA7, 0x31, 0x6A, 0x99, 0xCE, 0xF4, 0x14, 0x16 }
			);

			Assert.AreEqual(
				Digest.Hash<SHA256, RIPEMD160>(new byte[] { 0x01, 0x02, 0x03 }),
				new byte[] { 0x6B, 0x6E, 0x89, 0x5C, 0x36, 0x97, 0x9F, 0xB6, 0x06, 0x47, 0x3E, 0x08, 0x68, 0x68, 0x0F, 0x64, 0xBF, 0x72, 0x16, 0x64, 0x2A, 0x16, 0x70, 0xC1, 0xF2, 0x5E, 0xE3, 0xD2, 0xDE, 0x75, 0xAB, 0x71 }
			);
		}
	}
}

